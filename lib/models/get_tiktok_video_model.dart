///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class GetTikTokVideoModelResultAwemeDetailGroupIdList {
  String? GroupdIdList0;
  List<String?>? GroupdIdList1;

  GetTikTokVideoModelResultAwemeDetailGroupIdList({
    this.GroupdIdList0,
    this.GroupdIdList1,
  });
  GetTikTokVideoModelResultAwemeDetailGroupIdList.fromJson(
      Map<String, dynamic> json) {
    GroupdIdList0 = json['GroupdIdList0']?.toString();
    if (json['GroupdIdList1'] != null && (json['GroupdIdList1'] is List)) {
      final v = json['GroupdIdList1'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      GroupdIdList1 = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['GroupdIdList0'] = GroupdIdList0;
    if (GroupdIdList1 != null) {
      final v = GroupdIdList1;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['GroupdIdList1'] = arr0;
    }
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailInteractPermission {
  String? allowAddingToStory;
  String? duet;
  String? stitch;
  String? duetPrivacySetting;
  String? stitchPrivacySetting;
  String? upvote;

  GetTikTokVideoModelResultAwemeDetailInteractPermission({
    this.allowAddingToStory,
    this.duet,
    this.stitch,
    this.duetPrivacySetting,
    this.stitchPrivacySetting,
    this.upvote,
  });
  GetTikTokVideoModelResultAwemeDetailInteractPermission.fromJson(
      Map<String, dynamic> json) {
    allowAddingToStory = json['allow_adding_to_story']?.toString();
    duet = json['duet']?.toString();
    stitch = json['stitch']?.toString();
    duetPrivacySetting = json['duet_privacy_setting']?.toString();
    stitchPrivacySetting = json['stitch_privacy_setting']?.toString();
    upvote = json['upvote']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['allow_adding_to_story'] = allowAddingToStory;
    data['duet'] = duet;
    data['stitch'] = stitch;
    data['duet_privacy_setting'] = duetPrivacySetting;
    data['stitch_privacy_setting'] = stitchPrivacySetting;
    data['upvote'] = upvote;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailStatistics {
  String? forwardCount;
  String? whatsappShareCount;
  String? diggCount;
  String? playCount;
  String? shareCount;
  String? loseCount;
  String? loseCommentCount;
  String? collectCount;
  String? awemeId;
  String? commentCount;
  String? downloadCount;

  GetTikTokVideoModelResultAwemeDetailStatistics({
    this.forwardCount,
    this.whatsappShareCount,
    this.diggCount,
    this.playCount,
    this.shareCount,
    this.loseCount,
    this.loseCommentCount,
    this.collectCount,
    this.awemeId,
    this.commentCount,
    this.downloadCount,
  });
  GetTikTokVideoModelResultAwemeDetailStatistics.fromJson(
      Map<String, dynamic> json) {
    forwardCount = json['forward_count']?.toString();
    whatsappShareCount = json['whatsapp_share_count']?.toString();
    diggCount = json['digg_count']?.toString();
    playCount = json['play_count']?.toString();
    shareCount = json['share_count']?.toString();
    loseCount = json['lose_count']?.toString();
    loseCommentCount = json['lose_comment_count']?.toString();
    collectCount = json['collect_count']?.toString();
    awemeId = json['aweme_id']?.toString();
    commentCount = json['comment_count']?.toString();
    downloadCount = json['download_count']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['forward_count'] = forwardCount;
    data['whatsapp_share_count'] = whatsappShareCount;
    data['digg_count'] = diggCount;
    data['play_count'] = playCount;
    data['share_count'] = shareCount;
    data['lose_count'] = loseCount;
    data['lose_comment_count'] = loseCommentCount;
    data['collect_count'] = collectCount;
    data['aweme_id'] = awemeId;
    data['comment_count'] = commentCount;
    data['download_count'] = downloadCount;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCover {
  List<String?>? urlList;
  String? width;
  String? height;
  String? uri;

  GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCover({
    this.urlList,
    this.width,
    this.height,
    this.uri,
  });
  GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCover.fromJson(
      Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoDownloadSuffixLogoAddr {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;
  String? dataSize;

  GetTikTokVideoModelResultAwemeDetailVideoDownloadSuffixLogoAddr({
    this.uri,
    this.urlList,
    this.width,
    this.height,
    this.dataSize,
  });
  GetTikTokVideoModelResultAwemeDetailVideoDownloadSuffixLogoAddr.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    dataSize = json['data_size']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['data_size'] = dataSize;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoDownloadAddr {
  String? height;
  String? dataSize;
  String? uri;
  List<String?>? urlList;
  String? width;

  GetTikTokVideoModelResultAwemeDetailVideoDownloadAddr({
    this.height,
    this.dataSize,
    this.uri,
    this.urlList,
    this.width,
  });
  GetTikTokVideoModelResultAwemeDetailVideoDownloadAddr.fromJson(
      Map<String, dynamic> json) {
    height = json['height']?.toString();
    dataSize = json['data_size']?.toString();
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['height'] = height;
    data['data_size'] = dataSize;
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoOriginCover {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailVideoOriginCover({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailVideoOriginCover.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoPlayAddr {
  String? width;
  String? height;
  String? urlKey;
  String? dataSize;
  String? fileHash;
  String? fileCs;
  String? uri;
  List<String?>? urlList;

  GetTikTokVideoModelResultAwemeDetailVideoPlayAddr({
    this.width,
    this.height,
    this.urlKey,
    this.dataSize,
    this.fileHash,
    this.fileCs,
    this.uri,
    this.urlList,
  });
  GetTikTokVideoModelResultAwemeDetailVideoPlayAddr.fromJson(
      Map<String, dynamic> json) {
    width = json['width']?.toString();
    height = json['height']?.toString();
    urlKey = json['url_key']?.toString();
    dataSize = json['data_size']?.toString();
    fileHash = json['file_hash']?.toString();
    fileCs = json['file_cs']?.toString();
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['width'] = width;
    data['height'] = height;
    data['url_key'] = urlKey;
    data['data_size'] = dataSize;
    data['file_hash'] = fileHash;
    data['file_cs'] = fileCs;
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCoverBak {
  String? width;
  String? height;
  String? uri;
  List<String?>? urlList;

  GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCoverBak({
    this.width,
    this.height,
    this.uri,
    this.urlList,
  });
  GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCoverBak.fromJson(
      Map<String, dynamic> json) {
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoBitRatePlayAddr {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;
  String? urlKey;
  String? dataSize;
  String? fileHash;
  String? fileCs;

  GetTikTokVideoModelResultAwemeDetailVideoBitRatePlayAddr({
    this.uri,
    this.urlList,
    this.width,
    this.height,
    this.urlKey,
    this.dataSize,
    this.fileHash,
    this.fileCs,
  });
  GetTikTokVideoModelResultAwemeDetailVideoBitRatePlayAddr.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    urlKey = json['url_key']?.toString();
    dataSize = json['data_size']?.toString();
    fileHash = json['file_hash']?.toString();
    fileCs = json['file_cs']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['url_key'] = urlKey;
    data['data_size'] = dataSize;
    data['file_hash'] = fileHash;
    data['file_cs'] = fileCs;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoBitRate {
  String? gearName;
  String? qualityType;
  String? bitRate;
  GetTikTokVideoModelResultAwemeDetailVideoBitRatePlayAddr? playAddr;
  String? isH265;
  String? isBytevc1;
  String? dubInfos;

  GetTikTokVideoModelResultAwemeDetailVideoBitRate({
    this.gearName,
    this.qualityType,
    this.bitRate,
    this.playAddr,
    this.isH265,
    this.isBytevc1,
    this.dubInfos,
  });
  GetTikTokVideoModelResultAwemeDetailVideoBitRate.fromJson(
      Map<String, dynamic> json) {
    gearName = json['gear_name']?.toString();
    qualityType = json['quality_type']?.toString();
    bitRate = json['bit_rate']?.toString();
    playAddr = (json['play_addr'] != null && (json['play_addr'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailVideoBitRatePlayAddr.fromJson(
            json['play_addr'])
        : null;
    isH265 = json['is_h265']?.toString();
    isBytevc1 = json['is_bytevc1']?.toString();
    dubInfos = json['dub_infos']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['gear_name'] = gearName;
    data['quality_type'] = qualityType;
    data['bit_rate'] = bitRate;
    if (playAddr != null) {
      data['play_addr'] = playAddr!.toJson();
    }
    data['is_h265'] = isH265;
    data['is_bytevc1'] = isBytevc1;
    data['dub_infos'] = dubInfos;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoDynamicCover {
  List<String?>? urlList;
  String? width;
  String? height;
  String? uri;

  GetTikTokVideoModelResultAwemeDetailVideoDynamicCover({
    this.urlList,
    this.width,
    this.height,
    this.uri,
  });
  GetTikTokVideoModelResultAwemeDetailVideoDynamicCover.fromJson(
      Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoCover {
  List<String?>? urlList;
  String? width;
  String? height;
  String? uri;

  GetTikTokVideoModelResultAwemeDetailVideoCover({
    this.urlList,
    this.width,
    this.height,
    this.uri,
  });
  GetTikTokVideoModelResultAwemeDetailVideoCover.fromJson(
      Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideo {
  String? isBytevc1;
  bool? hasWatermark;
  String? duration;
  String? isH265;
  bool? needSetToken;
  String? tags;
  GetTikTokVideoModelResultAwemeDetailVideoCover? cover;
  String? width;
  GetTikTokVideoModelResultAwemeDetailVideoDynamicCover? dynamicCover;
  List<GetTikTokVideoModelResultAwemeDetailVideoBitRate?>? bitRate;
  GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCoverBak? aiDynamicCoverBak;
  String? miscDownloadAddrs;
  List<String?>? bigThumbs;
  String? meta;
  GetTikTokVideoModelResultAwemeDetailVideoPlayAddr? playAddr;
  GetTikTokVideoModelResultAwemeDetailVideoOriginCover? originCover;
  GetTikTokVideoModelResultAwemeDetailVideoDownloadAddr? downloadAddr;
  bool? hasDownloadSuffixLogoAddr;
  String? cdnUrlExpired;
  String? height;
  String? ratio;
  GetTikTokVideoModelResultAwemeDetailVideoDownloadSuffixLogoAddr?
      downloadSuffixLogoAddr;
  bool? isCallback;
  GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCover? aiDynamicCover;

  GetTikTokVideoModelResultAwemeDetailVideo({
    this.isBytevc1,
    this.hasWatermark,
    this.duration,
    this.isH265,
    this.needSetToken,
    this.tags,
    this.cover,
    this.width,
    this.dynamicCover,
    this.bitRate,
    this.aiDynamicCoverBak,
    this.miscDownloadAddrs,
    this.bigThumbs,
    this.meta,
    this.playAddr,
    this.originCover,
    this.downloadAddr,
    this.hasDownloadSuffixLogoAddr,
    this.cdnUrlExpired,
    this.height,
    this.ratio,
    this.downloadSuffixLogoAddr,
    this.isCallback,
    this.aiDynamicCover,
  });
  GetTikTokVideoModelResultAwemeDetailVideo.fromJson(
      Map<String, dynamic> json) {
    isBytevc1 = json['is_bytevc1']?.toString();
    hasWatermark = json['has_watermark'];
    duration = json['duration']?.toString();
    isH265 = json['is_h265']?.toString();
    needSetToken = json['need_set_token'];
    tags = json['tags']?.toString();
    cover = (json['cover'] != null && (json['cover'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailVideoCover.fromJson(json['cover'])
        : null;
    width = json['width']?.toString();
    dynamicCover =
        (json['dynamic_cover'] != null && (json['dynamic_cover'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailVideoDynamicCover.fromJson(
                json['dynamic_cover'])
            : null;
    if (json['bit_rate'] != null && (json['bit_rate'] is List)) {
      final v = json['bit_rate'];
      final arr0 = <GetTikTokVideoModelResultAwemeDetailVideoBitRate>[];
      v.forEach((v) {
        arr0.add(GetTikTokVideoModelResultAwemeDetailVideoBitRate.fromJson(v));
      });
      bitRate = arr0;
    }
    aiDynamicCoverBak = (json['ai_dynamic_cover_bak'] != null &&
            (json['ai_dynamic_cover_bak'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCoverBak.fromJson(
            json['ai_dynamic_cover_bak'])
        : null;
    miscDownloadAddrs = json['misc_download_addrs']?.toString();

    meta = json['meta']?.toString();
    playAddr = (json['play_addr'] != null && (json['play_addr'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailVideoPlayAddr.fromJson(
            json['play_addr'])
        : null;
    originCover =
        (json['origin_cover'] != null && (json['origin_cover'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailVideoOriginCover.fromJson(
                json['origin_cover'])
            : null;
    downloadAddr =
        (json['download_addr'] != null && (json['download_addr'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailVideoDownloadAddr.fromJson(
                json['download_addr'])
            : null;
    hasDownloadSuffixLogoAddr = json['has_download_suffix_logo_addr'];
    cdnUrlExpired = json['cdn_url_expired']?.toString();
    height = json['height']?.toString();
    ratio = json['ratio']?.toString();
    downloadSuffixLogoAddr = (json['download_suffix_logo_addr'] != null &&
            (json['download_suffix_logo_addr'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailVideoDownloadSuffixLogoAddr
            .fromJson(json['download_suffix_logo_addr'])
        : null;
    isCallback = json['is_callback'];
    aiDynamicCover =
        (json['ai_dynamic_cover'] != null && (json['ai_dynamic_cover'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailVideoAiDynamicCover.fromJson(
                json['ai_dynamic_cover'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['is_bytevc1'] = isBytevc1;
    data['has_watermark'] = hasWatermark;
    data['duration'] = duration;
    data['is_h265'] = isH265;
    data['need_set_token'] = needSetToken;
    data['tags'] = tags;
    if (cover != null) {
      data['cover'] = cover!.toJson();
    }
    data['width'] = width;
    if (dynamicCover != null) {
      data['dynamic_cover'] = dynamicCover!.toJson();
    }
    if (bitRate != null) {
      final v = bitRate;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['bit_rate'] = arr0;
    }
    if (aiDynamicCoverBak != null) {
      data['ai_dynamic_cover_bak'] = aiDynamicCoverBak!.toJson();
    }
    data['misc_download_addrs'] = miscDownloadAddrs;

    data['meta'] = meta;
    if (playAddr != null) {
      data['play_addr'] = playAddr!.toJson();
    }
    if (originCover != null) {
      data['origin_cover'] = originCover!.toJson();
    }
    if (downloadAddr != null) {
      data['download_addr'] = downloadAddr!.toJson();
    }
    data['has_download_suffix_logo_addr'] = hasDownloadSuffixLogoAddr;
    data['cdn_url_expired'] = cdnUrlExpired;
    data['height'] = height;
    data['ratio'] = ratio;
    if (downloadSuffixLogoAddr != null) {
      data['download_suffix_logo_addr'] = downloadSuffixLogoAddr!.toJson();
    }
    data['is_callback'] = isCallback;
    if (aiDynamicCover != null) {
      data['ai_dynamic_cover'] = aiDynamicCover!.toJson();
    }
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicAvatarMedium {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailMusicAvatarMedium({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailMusicAvatarMedium.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicCoverThumb {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailMusicCoverThumb({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailMusicCoverThumb.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicDurationHighPrecision {
  String? auditionDurationPrecision;
  String? videoDurationPrecision;
  String? durationPrecision;
  String? shootDurationPrecision;

  GetTikTokVideoModelResultAwemeDetailMusicDurationHighPrecision({
    this.auditionDurationPrecision,
    this.videoDurationPrecision,
    this.durationPrecision,
    this.shootDurationPrecision,
  });
  GetTikTokVideoModelResultAwemeDetailMusicDurationHighPrecision.fromJson(
      Map<String, dynamic> json) {
    auditionDurationPrecision = json['audition_duration_precision']?.toString();
    videoDurationPrecision = json['video_duration_precision']?.toString();
    durationPrecision = json['duration_precision']?.toString();
    shootDurationPrecision = json['shoot_duration_precision']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['audition_duration_precision'] = auditionDurationPrecision;
    data['video_duration_precision'] = videoDurationPrecision;
    data['duration_precision'] = durationPrecision;
    data['shoot_duration_precision'] = shootDurationPrecision;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicAvatarThumb {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailMusicAvatarThumb({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailMusicAvatarThumb.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicPlayUrl {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailMusicPlayUrl({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailMusicPlayUrl.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicCoverMedium {
  String? height;
  String? uri;
  List<String?>? urlList;
  String? width;

  GetTikTokVideoModelResultAwemeDetailMusicCoverMedium({
    this.height,
    this.uri,
    this.urlList,
    this.width,
  });
  GetTikTokVideoModelResultAwemeDetailMusicCoverMedium.fromJson(
      Map<String, dynamic> json) {
    height = json['height']?.toString();
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['height'] = height;
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusicCoverLarge {
  String? height;
  String? uri;
  List<String?>? urlList;
  String? width;

  GetTikTokVideoModelResultAwemeDetailMusicCoverLarge({
    this.height,
    this.uri,
    this.urlList,
    this.width,
  });
  GetTikTokVideoModelResultAwemeDetailMusicCoverLarge.fromJson(
      Map<String, dynamic> json) {
    height = json['height']?.toString();
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['height'] = height;
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailMusic {
  bool? isPlayMusic;
  GetTikTokVideoModelResultAwemeDetailMusicCoverLarge? coverLarge;
  GetTikTokVideoModelResultAwemeDetailMusicCoverMedium? coverMedium;
  GetTikTokVideoModelResultAwemeDetailMusicPlayUrl? playUrl;
  List<String?>? externalSongInfo;
  String? tagList;
  String? videoDuration;
  GetTikTokVideoModelResultAwemeDetailMusicAvatarThumb? avatarThumb;
  bool? isCommerceMusic;
  bool? isOriginalSound;
  bool? muteShare;
  String? ownerHandle;
  bool? preventDownload;
  String? multiBitRatePlayInfo;
  GetTikTokVideoModelResultAwemeDetailMusicDurationHighPrecision?
      durationHighPrecision;
  String? title;
  String? sourcePlatform;
  String? position;
  String? bindedChallengeId;
  String? mid;
  String? authorPosition;
  String? shootDuration;
  String? lyricShortPosition;
  String? id;
  String? offlineDesc;
  String? ownerNickname;
  bool? isOriginal;
  bool? isAuthorArtist;
  bool? isPgc;
  bool? isMatchedMetadata;
  GetTikTokVideoModelResultAwemeDetailMusicCoverThumb? coverThumb;
  String? secUid;
  String? auditionDuration;
  bool? canNotReuse;
  bool? dmvAutoShow;
  bool? isAudioUrlWithCookie;
  String? idStr;
  String? userCount;
  String? status;
  String? ownerId;
  GetTikTokVideoModelResultAwemeDetailMusicAvatarMedium? avatarMedium;
  String? previewStartTime;
  List<String?>? artists;
  String? author;
  String? album;
  String? extra;
  bool? authorDeleted;
  String? duration;
  String? collectStat;
  String? previewEndTime;
  String? searchHighlight;

  GetTikTokVideoModelResultAwemeDetailMusic({
    this.isPlayMusic,
    this.coverLarge,
    this.coverMedium,
    this.playUrl,
    this.externalSongInfo,
    this.tagList,
    this.videoDuration,
    this.avatarThumb,
    this.isCommerceMusic,
    this.isOriginalSound,
    this.muteShare,
    this.ownerHandle,
    this.preventDownload,
    this.multiBitRatePlayInfo,
    this.durationHighPrecision,
    this.title,
    this.sourcePlatform,
    this.position,
    this.bindedChallengeId,
    this.mid,
    this.authorPosition,
    this.shootDuration,
    this.lyricShortPosition,
    this.id,
    this.offlineDesc,
    this.ownerNickname,
    this.isOriginal,
    this.isAuthorArtist,
    this.isPgc,
    this.isMatchedMetadata,
    this.coverThumb,
    this.secUid,
    this.auditionDuration,
    this.canNotReuse,
    this.dmvAutoShow,
    this.isAudioUrlWithCookie,
    this.idStr,
    this.userCount,
    this.status,
    this.ownerId,
    this.avatarMedium,
    this.previewStartTime,
    this.artists,
    this.author,
    this.album,
    this.extra,
    this.authorDeleted,
    this.duration,
    this.collectStat,
    this.previewEndTime,
    this.searchHighlight,
  });
  GetTikTokVideoModelResultAwemeDetailMusic.fromJson(
      Map<String, dynamic> json) {
    isPlayMusic = json['is_play_music'];
    coverLarge = (json['cover_large'] != null && (json['cover_large'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailMusicCoverLarge.fromJson(
            json['cover_large'])
        : null;
    coverMedium =
        (json['cover_medium'] != null && (json['cover_medium'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailMusicCoverMedium.fromJson(
                json['cover_medium'])
            : null;
    playUrl = (json['play_url'] != null && (json['play_url'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailMusicPlayUrl.fromJson(
            json['play_url'])
        : null;

    tagList = json['tag_list']?.toString();
    videoDuration = json['video_duration']?.toString();
    avatarThumb =
        (json['avatar_thumb'] != null && (json['avatar_thumb'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailMusicAvatarThumb.fromJson(
                json['avatar_thumb'])
            : null;
    isCommerceMusic = json['is_commerce_music'];
    isOriginalSound = json['is_original_sound'];
    muteShare = json['mute_share'];
    ownerHandle = json['owner_handle']?.toString();
    preventDownload = json['prevent_download'];
    multiBitRatePlayInfo = json['multi_bit_rate_play_info']?.toString();
    durationHighPrecision = (json['duration_high_precision'] != null &&
            (json['duration_high_precision'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailMusicDurationHighPrecision
            .fromJson(json['duration_high_precision'])
        : null;
    title = json['title']?.toString();
    sourcePlatform = json['source_platform']?.toString();
    position = json['position']?.toString();
    bindedChallengeId = json['binded_challenge_id']?.toString();
    mid = json['mid']?.toString();
    authorPosition = json['author_position']?.toString();
    shootDuration = json['shoot_duration']?.toString();
    lyricShortPosition = json['lyric_short_position']?.toString();
    id = json['id']?.toString();
    offlineDesc = json['offline_desc']?.toString();
    ownerNickname = json['owner_nickname']?.toString();
    isOriginal = json['is_original'];
    isAuthorArtist = json['is_author_artist'];
    isPgc = json['is_pgc'];
    isMatchedMetadata = json['is_matched_metadata'];
    coverThumb = (json['cover_thumb'] != null && (json['cover_thumb'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailMusicCoverThumb.fromJson(
            json['cover_thumb'])
        : null;
    secUid = json['sec_uid']?.toString();
    auditionDuration = json['audition_duration']?.toString();
    canNotReuse = json['can_not_reuse'];
    dmvAutoShow = json['dmv_auto_show'];
    isAudioUrlWithCookie = json['is_audio_url_with_cookie'];
    idStr = json['id_str']?.toString();
    userCount = json['user_count']?.toString();
    status = json['status']?.toString();
    ownerId = json['owner_id']?.toString();
    avatarMedium =
        (json['avatar_medium'] != null && (json['avatar_medium'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailMusicAvatarMedium.fromJson(
                json['avatar_medium'])
            : null;
    previewStartTime = json['preview_start_time']?.toString();

    author = json['author']?.toString();
    album = json['album']?.toString();
    extra = json['extra']?.toString();
    authorDeleted = json['author_deleted'];
    duration = json['duration']?.toString();
    collectStat = json['collect_stat']?.toString();
    previewEndTime = json['preview_end_time']?.toString();
    searchHighlight = json['search_highlight']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['is_play_music'] = isPlayMusic;
    if (coverLarge != null) {
      data['cover_large'] = coverLarge!.toJson();
    }
    if (coverMedium != null) {
      data['cover_medium'] = coverMedium!.toJson();
    }
    if (playUrl != null) {
      data['play_url'] = playUrl!.toJson();
    }

    data['tag_list'] = tagList;
    data['video_duration'] = videoDuration;
    if (avatarThumb != null) {
      data['avatar_thumb'] = avatarThumb!.toJson();
    }
    data['is_commerce_music'] = isCommerceMusic;
    data['is_original_sound'] = isOriginalSound;
    data['mute_share'] = muteShare;
    data['owner_handle'] = ownerHandle;
    data['prevent_download'] = preventDownload;
    data['multi_bit_rate_play_info'] = multiBitRatePlayInfo;
    if (durationHighPrecision != null) {
      data['duration_high_precision'] = durationHighPrecision!.toJson();
    }
    data['title'] = title;
    data['source_platform'] = sourcePlatform;
    data['position'] = position;
    data['binded_challenge_id'] = bindedChallengeId;
    data['mid'] = mid;
    data['author_position'] = authorPosition;
    data['shoot_duration'] = shootDuration;
    data['lyric_short_position'] = lyricShortPosition;
    data['id'] = id;
    data['offline_desc'] = offlineDesc;
    data['owner_nickname'] = ownerNickname;
    data['is_original'] = isOriginal;
    data['is_author_artist'] = isAuthorArtist;
    data['is_pgc'] = isPgc;
    data['is_matched_metadata'] = isMatchedMetadata;
    if (coverThumb != null) {
      data['cover_thumb'] = coverThumb!.toJson();
    }
    data['sec_uid'] = secUid;
    data['audition_duration'] = auditionDuration;
    data['can_not_reuse'] = canNotReuse;
    data['dmv_auto_show'] = dmvAutoShow;
    data['is_audio_url_with_cookie'] = isAudioUrlWithCookie;
    data['id_str'] = idStr;
    data['user_count'] = userCount;
    data['status'] = status;
    data['owner_id'] = ownerId;
    if (avatarMedium != null) {
      data['avatar_medium'] = avatarMedium!.toJson();
    }
    data['preview_start_time'] = previewStartTime;

    data['author'] = author;
    data['album'] = album;
    data['extra'] = extra;
    data['author_deleted'] = authorDeleted;
    data['duration'] = duration;
    data['collect_stat'] = collectStat;
    data['preview_end_time'] = previewEndTime;
    data['search_highlight'] = searchHighlight;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailRiskInfos {
  bool? vote;
  bool? warn;
  bool? riskSink;
  String? type;
  String? content;

  GetTikTokVideoModelResultAwemeDetailRiskInfos({
    this.vote,
    this.warn,
    this.riskSink,
    this.type,
    this.content,
  });
  GetTikTokVideoModelResultAwemeDetailRiskInfos.fromJson(
      Map<String, dynamic> json) {
    vote = json['vote'];
    warn = json['warn'];
    riskSink = json['risk_sink'];
    type = json['type']?.toString();
    content = json['content']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['vote'] = vote;
    data['warn'] = warn;
    data['risk_sink'] = riskSink;
    data['type'] = type;
    data['content'] = content;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailShareInfo {
  String? shareWeiboDesc;
  String? shareTitleMyself;
  String? shareTitleOther;
  String? shareLinkDesc;
  String? shareSignatureUrl;
  String? shareUrl;
  String? shareTitle;
  String? boolPersist;
  String? shareSignatureDesc;
  String? shareQuote;
  String? shareDescInfo;
  String? shareDesc;

  GetTikTokVideoModelResultAwemeDetailShareInfo({
    this.shareWeiboDesc,
    this.shareTitleMyself,
    this.shareTitleOther,
    this.shareLinkDesc,
    this.shareSignatureUrl,
    this.shareUrl,
    this.shareTitle,
    this.boolPersist,
    this.shareSignatureDesc,
    this.shareQuote,
    this.shareDescInfo,
    this.shareDesc,
  });
  GetTikTokVideoModelResultAwemeDetailShareInfo.fromJson(
      Map<String, dynamic> json) {
    shareWeiboDesc = json['share_weibo_desc']?.toString();
    shareTitleMyself = json['share_title_myself']?.toString();
    shareTitleOther = json['share_title_other']?.toString();
    shareLinkDesc = json['share_link_desc']?.toString();
    shareSignatureUrl = json['share_signature_url']?.toString();
    shareUrl = json['share_url']?.toString();
    shareTitle = json['share_title']?.toString();
    boolPersist = json['bool_persist']?.toString();
    shareSignatureDesc = json['share_signature_desc']?.toString();
    shareQuote = json['share_quote']?.toString();
    shareDescInfo = json['share_desc_info']?.toString();
    shareDesc = json['share_desc']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['share_weibo_desc'] = shareWeiboDesc;
    data['share_title_myself'] = shareTitleMyself;
    data['share_title_other'] = shareTitleOther;
    data['share_link_desc'] = shareLinkDesc;
    data['share_signature_url'] = shareSignatureUrl;
    data['share_url'] = shareUrl;
    data['share_title'] = shareTitle;
    data['bool_persist'] = boolPersist;
    data['share_signature_desc'] = shareSignatureDesc;
    data['share_quote'] = shareQuote;
    data['share_desc_info'] = shareDescInfo;
    data['share_desc'] = shareDesc;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailVideoControl {
  String? showProgressBar;
  String? draftProgressBar;
  bool? allowReact;
  String? preventDownloadType;
  bool? allowDynamicWallpaper;
  String? timerStatus;
  bool? allowDownload;
  String? shareType;
  bool? allowDuet;
  bool? allowMusic;
  bool? allowStitch;

  GetTikTokVideoModelResultAwemeDetailVideoControl({
    this.showProgressBar,
    this.draftProgressBar,
    this.allowReact,
    this.preventDownloadType,
    this.allowDynamicWallpaper,
    this.timerStatus,
    this.allowDownload,
    this.shareType,
    this.allowDuet,
    this.allowMusic,
    this.allowStitch,
  });
  GetTikTokVideoModelResultAwemeDetailVideoControl.fromJson(
      Map<String, dynamic> json) {
    showProgressBar = json['show_progress_bar']?.toString();
    draftProgressBar = json['draft_progress_bar']?.toString();
    allowReact = json['allow_react'];
    preventDownloadType = json['prevent_download_type']?.toString();
    allowDynamicWallpaper = json['allow_dynamic_wallpaper'];
    timerStatus = json['timer_status']?.toString();
    allowDownload = json['allow_download'];
    shareType = json['share_type']?.toString();
    allowDuet = json['allow_duet'];
    allowMusic = json['allow_music'];
    allowStitch = json['allow_stitch'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['show_progress_bar'] = showProgressBar;
    data['draft_progress_bar'] = draftProgressBar;
    data['allow_react'] = allowReact;
    data['prevent_download_type'] = preventDownloadType;
    data['allow_dynamic_wallpaper'] = allowDynamicWallpaper;
    data['timer_status'] = timerStatus;
    data['allow_download'] = allowDownload;
    data['share_type'] = shareType;
    data['allow_duet'] = allowDuet;
    data['allow_music'] = allowMusic;
    data['allow_stitch'] = allowStitch;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailStatusReviewResult {
  String? reviewStatus;

  GetTikTokVideoModelResultAwemeDetailStatusReviewResult({
    this.reviewStatus,
  });
  GetTikTokVideoModelResultAwemeDetailStatusReviewResult.fromJson(
      Map<String, dynamic> json) {
    reviewStatus = json['review_status']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['review_status'] = reviewStatus;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailStatus {
  String? reviewed;
  String? awemeId;
  bool? allowComment;
  String? privateStatus;
  bool? inReviewing;
  bool? selfSee;
  bool? isProhibited;
  String? downloadStatus;
  GetTikTokVideoModelResultAwemeDetailStatusReviewResult? reviewResult;
  bool? isDelete;
  bool? allowShare;

  GetTikTokVideoModelResultAwemeDetailStatus({
    this.reviewed,
    this.awemeId,
    this.allowComment,
    this.privateStatus,
    this.inReviewing,
    this.selfSee,
    this.isProhibited,
    this.downloadStatus,
    this.reviewResult,
    this.isDelete,
    this.allowShare,
  });
  GetTikTokVideoModelResultAwemeDetailStatus.fromJson(
      Map<String, dynamic> json) {
    reviewed = json['reviewed']?.toString();
    awemeId = json['aweme_id']?.toString();
    allowComment = json['allow_comment'];
    privateStatus = json['private_status']?.toString();
    inReviewing = json['in_reviewing'];
    selfSee = json['self_see'];
    isProhibited = json['is_prohibited'];
    downloadStatus = json['download_status']?.toString();
    reviewResult =
        (json['review_result'] != null && (json['review_result'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailStatusReviewResult.fromJson(
                json['review_result'])
            : null;
    isDelete = json['is_delete'];
    allowShare = json['allow_share'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['reviewed'] = reviewed;
    data['aweme_id'] = awemeId;
    data['allow_comment'] = allowComment;
    data['private_status'] = privateStatus;
    data['in_reviewing'] = inReviewing;
    data['self_see'] = selfSee;
    data['is_prohibited'] = isProhibited;
    data['download_status'] = downloadStatus;
    if (reviewResult != null) {
      data['review_result'] = reviewResult!.toJson();
    }
    data['is_delete'] = isDelete;
    data['allow_share'] = allowShare;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailLabelTop {
  List<String?>? urlList;
  String? width;
  String? height;
  String? uri;

  GetTikTokVideoModelResultAwemeDetailLabelTop({
    this.urlList,
    this.width,
    this.height,
    this.uri,
  });
  GetTikTokVideoModelResultAwemeDetailLabelTop.fromJson(
      Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailTextExtra {
  String? start;
  String? end;
  String? userId;
  String? type;
  String? secUid;

  GetTikTokVideoModelResultAwemeDetailTextExtra({
    this.start,
    this.end,
    this.userId,
    this.type,
    this.secUid,
  });
  GetTikTokVideoModelResultAwemeDetailTextExtra.fromJson(
      Map<String, dynamic> json) {
    start = json['start']?.toString();
    end = json['end']?.toString();
    userId = json['user_id']?.toString();
    type = json['type']?.toString();
    secUid = json['sec_uid']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['start'] = start;
    data['end'] = end;
    data['user_id'] = userId;
    data['type'] = type;
    data['sec_uid'] = secUid;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailCommerceInfo {
  bool? advPromotable;
  bool? auctionAdInvited;
  bool? withCommentFilterWords;

  GetTikTokVideoModelResultAwemeDetailCommerceInfo({
    this.advPromotable,
    this.auctionAdInvited,
    this.withCommentFilterWords,
  });
  GetTikTokVideoModelResultAwemeDetailCommerceInfo.fromJson(
      Map<String, dynamic> json) {
    advPromotable = json['adv_promotable'];
    auctionAdInvited = json['auction_ad_invited'];
    withCommentFilterWords = json['with_comment_filter_words'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['adv_promotable'] = advPromotable;
    data['auction_ad_invited'] = auctionAdInvited;
    data['with_comment_filter_words'] = withCommentFilterWords;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorShareInfoShareQrcodeUrl {
  String? width;
  String? height;
  String? uri;
  List<String?>? urlList;

  GetTikTokVideoModelResultAwemeDetailAuthorShareInfoShareQrcodeUrl({
    this.width,
    this.height,
    this.uri,
    this.urlList,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorShareInfoShareQrcodeUrl.fromJson(
      Map<String, dynamic> json) {
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;

    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorShareInfo {
  String? shareTitleMyself;
  String? shareTitleOther;
  String? shareDescInfo;
  String? shareUrl;
  String? shareWeiboDesc;
  String? shareDesc;
  String? shareTitle;
  GetTikTokVideoModelResultAwemeDetailAuthorShareInfoShareQrcodeUrl?
      shareQrcodeUrl;

  GetTikTokVideoModelResultAwemeDetailAuthorShareInfo({
    this.shareTitleMyself,
    this.shareTitleOther,
    this.shareDescInfo,
    this.shareUrl,
    this.shareWeiboDesc,
    this.shareDesc,
    this.shareTitle,
    this.shareQrcodeUrl,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorShareInfo.fromJson(
      Map<String, dynamic> json) {
    shareTitleMyself = json['share_title_myself']?.toString();
    shareTitleOther = json['share_title_other']?.toString();
    shareDescInfo = json['share_desc_info']?.toString();
    shareUrl = json['share_url']?.toString();
    shareWeiboDesc = json['share_weibo_desc']?.toString();
    shareDesc = json['share_desc']?.toString();
    shareTitle = json['share_title']?.toString();
    shareQrcodeUrl =
        (json['share_qrcode_url'] != null && (json['share_qrcode_url'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailAuthorShareInfoShareQrcodeUrl
                .fromJson(json['share_qrcode_url'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['share_title_myself'] = shareTitleMyself;
    data['share_title_other'] = shareTitleOther;
    data['share_desc_info'] = shareDescInfo;
    data['share_url'] = shareUrl;
    data['share_weibo_desc'] = shareWeiboDesc;
    data['share_desc'] = shareDesc;
    data['share_title'] = shareTitle;
    if (shareQrcodeUrl != null) {
      data['share_qrcode_url'] = shareQrcodeUrl!.toJson();
    }
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorAvatarThumb {
  List<String?>? urlList;
  String? width;
  String? height;
  String? uri;

  GetTikTokVideoModelResultAwemeDetailAuthorAvatarThumb({
    this.urlList,
    this.width,
    this.height,
    this.uri,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorAvatarThumb.fromJson(
      Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorVideoIcon {
  String? width;
  String? height;
  String? uri;
  List<String?>? urlList;

  GetTikTokVideoModelResultAwemeDetailAuthorVideoIcon({
    this.width,
    this.height,
    this.uri,
    this.urlList,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorVideoIcon.fromJson(
      Map<String, dynamic> json) {
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;

    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorAvatar_300x300 {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailAuthorAvatar_300x300({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorAvatar_300x300.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorCoverUrl {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailAuthorCoverUrl({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorCoverUrl.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorAvatarMedium {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailAuthorAvatarMedium({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorAvatarMedium.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorAvatarLarger {
  String? uri;
  List<String?>? urlList;
  String? width;
  String? height;

  GetTikTokVideoModelResultAwemeDetailAuthorAvatarLarger({
    this.uri,
    this.urlList,
    this.width,
    this.height,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorAvatarLarger.fromJson(
      Map<String, dynamic> json) {
    uri = json['uri']?.toString();
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['uri'] = uri;
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthorAvatar_168x168 {
  List<String?>? urlList;
  String? width;
  String? height;
  String? uri;

  GetTikTokVideoModelResultAwemeDetailAuthorAvatar_168x168({
    this.urlList,
    this.width,
    this.height,
    this.uri,
  });
  GetTikTokVideoModelResultAwemeDetailAuthorAvatar_168x168.fromJson(
      Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    width = json['width']?.toString();
    height = json['height']?.toString();
    uri = json['uri']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['width'] = width;
    data['height'] = height;
    data['uri'] = uri;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetailAuthor {
  String? createTime;
  String? adCoverUrl;
  String? twExpireTime;
  String? accountRegion;
  bool? isDisciplineMember;
  String? totalFavorited;
  bool? hasYoutubeToken;
  String? cvLevel;
  String? canSetGeofencing;
  String? customVerify;
  String? needPoints;
  String? mutualRelationAvatars;
  bool? showImageBubble;
  String? appleAccount;
  String? shieldEditFieldInfo;
  String? shieldFollowNotice;
  bool? isStar;
  GetTikTokVideoModelResultAwemeDetailAuthorAvatar_168x168? avatar_168x168;
  String? roomId;
  String? platformSyncInfo;
  String? avatarUri;
  bool? hideSearch;
  bool? userCanceled;
  String? followerStatus;
  String? userPeriod;
  String? relativeUsers;
  String? geofencing;
  String? awemeCount;
  String? youtubeExpireTime;
  String? twitterId;
  String? itemList;
  bool? hasInsights;
  String? boldFields;
  bool? isBlock;
  bool? acceptPrivatePolicy;
  String? events;
  String? canMessageFollowStatusList;
  String? reactSetting;
  String? userMode;
  bool? withCommerceEntry;
  bool? isAdFake;
  String? uid;
  String? bindPhone;
  bool? hasFacebookToken;
  bool? liveCommerce;
  String? typeLabel;
  String? liveVerify;
  bool? hasEmail;
  String? userRate;
  GetTikTokVideoModelResultAwemeDetailAuthorAvatarLarger? avatarLarger;
  String? fbExpireTime;
  String? secUid;
  String? language;
  String? followerCount;
  String? favoritingCount;
  String? userTags;
  String? whiteCoverUrl;
  String? uniqueIdModifyTime;
  String? commerceUserLevel;
  bool? withShopEntry;
  String? status;
  String? mentionStatus;
  String? verificationType;
  String? googleAccount;
  bool? isPhoneBinded;
  String? advanceFeatureItemOrder;
  String? specialLock;
  String? region;
  String? searchHighlight;
  String? shortId;
  bool? hasTwitterToken;
  String? downloadPromptTs;
  String? homepageBottomToast;
  String? userProfileGuide;
  String? nickname;
  String? signature;
  GetTikTokVideoModelResultAwemeDetailAuthorAvatarMedium? avatarMedium;
  String? followingCount;
  bool? hasOrders;
  String? needRecommend;
  String? shieldDiggNotice;
  String? enterpriseVerifyReason;
  String? insId;
  List<GetTikTokVideoModelResultAwemeDetailAuthorCoverUrl?>? coverUrl;
  GetTikTokVideoModelResultAwemeDetailAuthorAvatar_300x300? avatar_300x300;
  String? followStatus;
  String? verifyInfo;
  String? youtubeChannelId;
  String? stitchSetting;
  String? advancedFeatureInfo;
  GetTikTokVideoModelResultAwemeDetailAuthorVideoIcon? videoIcon;
  String? twitterName;
  String? duetSetting;
  String? shareQrcodeUri;
  GetTikTokVideoModelResultAwemeDetailAuthorAvatarThumb? avatarThumb;
  GetTikTokVideoModelResultAwemeDetailAuthorShareInfo? shareInfo;
  String? commentFilterStatus;
  String? chaList;
  String? friendsStatus;
  String? authorityStatus;
  String? shieldCommentNotice;
  String? secret;
  String? uniqueId;
  String? youtubeChannelTitle;
  String? downloadSetting;
  String? followersDetail;
  String? commentSetting;
  String? liveAgreement;
  bool? preventDownload;

  GetTikTokVideoModelResultAwemeDetailAuthor({
    this.createTime,
    this.adCoverUrl,
    this.twExpireTime,
    this.accountRegion,
    this.isDisciplineMember,
    this.totalFavorited,
    this.hasYoutubeToken,
    this.cvLevel,
    this.canSetGeofencing,
    this.customVerify,
    this.needPoints,
    this.mutualRelationAvatars,
    this.showImageBubble,
    this.appleAccount,
    this.shieldEditFieldInfo,
    this.shieldFollowNotice,
    this.isStar,
    this.avatar_168x168,
    this.roomId,
    this.platformSyncInfo,
    this.avatarUri,
    this.hideSearch,
    this.userCanceled,
    this.followerStatus,
    this.userPeriod,
    this.relativeUsers,
    this.geofencing,
    this.awemeCount,
    this.youtubeExpireTime,
    this.twitterId,
    this.itemList,
    this.hasInsights,
    this.boldFields,
    this.isBlock,
    this.acceptPrivatePolicy,
    this.events,
    this.canMessageFollowStatusList,
    this.reactSetting,
    this.userMode,
    this.withCommerceEntry,
    this.isAdFake,
    this.uid,
    this.bindPhone,
    this.hasFacebookToken,
    this.liveCommerce,
    this.typeLabel,
    this.liveVerify,
    this.hasEmail,
    this.userRate,
    this.avatarLarger,
    this.fbExpireTime,
    this.secUid,
    this.language,
    this.followerCount,
    this.favoritingCount,
    this.userTags,
    this.whiteCoverUrl,
    this.uniqueIdModifyTime,
    this.commerceUserLevel,
    this.withShopEntry,
    this.status,
    this.mentionStatus,
    this.verificationType,
    this.googleAccount,
    this.isPhoneBinded,
    this.advanceFeatureItemOrder,
    this.specialLock,
    this.region,
    this.searchHighlight,
    this.shortId,
    this.hasTwitterToken,
    this.downloadPromptTs,
    this.homepageBottomToast,
    this.userProfileGuide,
    this.nickname,
    this.signature,
    this.avatarMedium,
    this.followingCount,
    this.hasOrders,
    this.needRecommend,
    this.shieldDiggNotice,
    this.enterpriseVerifyReason,
    this.insId,
    this.coverUrl,
    this.avatar_300x300,
    this.followStatus,
    this.verifyInfo,
    this.youtubeChannelId,
    this.stitchSetting,
    this.advancedFeatureInfo,
    this.videoIcon,
    this.twitterName,
    this.duetSetting,
    this.shareQrcodeUri,
    this.avatarThumb,
    this.shareInfo,
    this.commentFilterStatus,
    this.chaList,
    this.friendsStatus,
    this.authorityStatus,
    this.shieldCommentNotice,
    this.secret,
    this.uniqueId,
    this.youtubeChannelTitle,
    this.downloadSetting,
    this.followersDetail,
    this.commentSetting,
    this.liveAgreement,
    this.preventDownload,
  });
  GetTikTokVideoModelResultAwemeDetailAuthor.fromJson(
      Map<String, dynamic> json) {
    createTime = json['create_time']?.toString();
    adCoverUrl = json['ad_cover_url']?.toString();
    twExpireTime = json['tw_expire_time']?.toString();
    accountRegion = json['account_region']?.toString();
    isDisciplineMember = json['is_discipline_member'];
    totalFavorited = json['total_favorited']?.toString();
    hasYoutubeToken = json['has_youtube_token'];
    cvLevel = json['cv_level']?.toString();
    canSetGeofencing = json['can_set_geofencing']?.toString();
    customVerify = json['custom_verify']?.toString();
    needPoints = json['need_points']?.toString();
    mutualRelationAvatars = json['mutual_relation_avatars']?.toString();
    showImageBubble = json['show_image_bubble'];
    appleAccount = json['apple_account']?.toString();
    shieldEditFieldInfo = json['shield_edit_field_info']?.toString();
    shieldFollowNotice = json['shield_follow_notice']?.toString();
    isStar = json['is_star'];
    avatar_168x168 =
        (json['avatar_168x168'] != null && (json['avatar_168x168'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailAuthorAvatar_168x168.fromJson(
                json['avatar_168x168'])
            : null;
    roomId = json['room_id']?.toString();
    platformSyncInfo = json['platform_sync_info']?.toString();
    avatarUri = json['avatar_uri']?.toString();
    hideSearch = json['hide_search'];
    userCanceled = json['user_canceled'];
    followerStatus = json['follower_status']?.toString();
    userPeriod = json['user_period']?.toString();
    relativeUsers = json['relative_users']?.toString();
    geofencing = json['geofencing']?.toString();
    awemeCount = json['aweme_count']?.toString();
    youtubeExpireTime = json['youtube_expire_time']?.toString();
    twitterId = json['twitter_id']?.toString();
    itemList = json['item_list']?.toString();
    hasInsights = json['has_insights'];
    boldFields = json['bold_fields']?.toString();
    isBlock = json['is_block'];
    acceptPrivatePolicy = json['accept_private_policy'];
    events = json['events']?.toString();
    canMessageFollowStatusList =
        json['can_message_follow_status_list']?.toString();
    reactSetting = json['react_setting']?.toString();
    userMode = json['user_mode']?.toString();
    withCommerceEntry = json['with_commerce_entry'];
    isAdFake = json['is_ad_fake'];
    uid = json['uid']?.toString();
    bindPhone = json['bind_phone']?.toString();
    hasFacebookToken = json['has_facebook_token'];
    liveCommerce = json['live_commerce'];
    typeLabel = json['type_label']?.toString();
    liveVerify = json['live_verify']?.toString();
    hasEmail = json['has_email'];
    userRate = json['user_rate']?.toString();
    avatarLarger =
        (json['avatar_larger'] != null && (json['avatar_larger'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailAuthorAvatarLarger.fromJson(
                json['avatar_larger'])
            : null;
    fbExpireTime = json['fb_expire_time']?.toString();
    secUid = json['sec_uid']?.toString();
    language = json['language']?.toString();
    followerCount = json['follower_count']?.toString();
    favoritingCount = json['favoriting_count']?.toString();
    userTags = json['user_tags']?.toString();
    whiteCoverUrl = json['white_cover_url']?.toString();
    uniqueIdModifyTime = json['unique_id_modify_time']?.toString();
    commerceUserLevel = json['commerce_user_level']?.toString();
    withShopEntry = json['with_shop_entry'];
    status = json['status']?.toString();
    mentionStatus = json['mention_status']?.toString();
    verificationType = json['verification_type']?.toString();
    googleAccount = json['google_account']?.toString();
    isPhoneBinded = json['is_phone_binded'];
    advanceFeatureItemOrder = json['advance_feature_item_order']?.toString();
    specialLock = json['special_lock']?.toString();
    region = json['region']?.toString();
    searchHighlight = json['search_highlight']?.toString();
    shortId = json['short_id']?.toString();
    hasTwitterToken = json['has_twitter_token'];
    downloadPromptTs = json['download_prompt_ts']?.toString();
    homepageBottomToast = json['homepage_bottom_toast']?.toString();
    userProfileGuide = json['user_profile_guide']?.toString();
    nickname = json['nickname']?.toString();
    signature = json['signature']?.toString();
    avatarMedium =
        (json['avatar_medium'] != null && (json['avatar_medium'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailAuthorAvatarMedium.fromJson(
                json['avatar_medium'])
            : null;
    followingCount = json['following_count']?.toString();
    hasOrders = json['has_orders'];
    needRecommend = json['need_recommend']?.toString();
    shieldDiggNotice = json['shield_digg_notice']?.toString();
    enterpriseVerifyReason = json['enterprise_verify_reason']?.toString();
    insId = json['ins_id']?.toString();
    if (json['cover_url'] != null && (json['cover_url'] is List)) {
      final v = json['cover_url'];
      final arr0 = <GetTikTokVideoModelResultAwemeDetailAuthorCoverUrl>[];
      v.forEach((v) {
        arr0.add(
            GetTikTokVideoModelResultAwemeDetailAuthorCoverUrl.fromJson(v));
      });
      coverUrl = arr0;
    }
    avatar_300x300 =
        (json['avatar_300x300'] != null && (json['avatar_300x300'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailAuthorAvatar_300x300.fromJson(
                json['avatar_300x300'])
            : null;
    followStatus = json['follow_status']?.toString();
    verifyInfo = json['verify_info']?.toString();
    youtubeChannelId = json['youtube_channel_id']?.toString();
    stitchSetting = json['stitch_setting']?.toString();
    advancedFeatureInfo = json['advanced_feature_info']?.toString();
    videoIcon = (json['video_icon'] != null && (json['video_icon'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailAuthorVideoIcon.fromJson(
            json['video_icon'])
        : null;
    twitterName = json['twitter_name']?.toString();
    duetSetting = json['duet_setting']?.toString();
    shareQrcodeUri = json['share_qrcode_uri']?.toString();
    avatarThumb =
        (json['avatar_thumb'] != null && (json['avatar_thumb'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailAuthorAvatarThumb.fromJson(
                json['avatar_thumb'])
            : null;
    shareInfo = (json['share_info'] != null && (json['share_info'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailAuthorShareInfo.fromJson(
            json['share_info'])
        : null;
    commentFilterStatus = json['comment_filter_status']?.toString();
    chaList = json['cha_list']?.toString();
    friendsStatus = json['friends_status']?.toString();
    authorityStatus = json['authority_status']?.toString();
    shieldCommentNotice = json['shield_comment_notice']?.toString();
    secret = json['secret']?.toString();
    uniqueId = json['unique_id']?.toString();
    youtubeChannelTitle = json['youtube_channel_title']?.toString();
    downloadSetting = json['download_setting']?.toString();
    followersDetail = json['followers_detail']?.toString();
    commentSetting = json['comment_setting']?.toString();
    liveAgreement = json['live_agreement']?.toString();
    preventDownload = json['prevent_download'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['create_time'] = createTime;
    data['ad_cover_url'] = adCoverUrl;
    data['tw_expire_time'] = twExpireTime;
    data['account_region'] = accountRegion;
    data['is_discipline_member'] = isDisciplineMember;
    data['total_favorited'] = totalFavorited;
    data['has_youtube_token'] = hasYoutubeToken;
    data['cv_level'] = cvLevel;
    data['can_set_geofencing'] = canSetGeofencing;
    data['custom_verify'] = customVerify;
    data['need_points'] = needPoints;
    data['mutual_relation_avatars'] = mutualRelationAvatars;
    data['show_image_bubble'] = showImageBubble;
    data['apple_account'] = appleAccount;
    data['shield_edit_field_info'] = shieldEditFieldInfo;
    data['shield_follow_notice'] = shieldFollowNotice;
    data['is_star'] = isStar;
    if (avatar_168x168 != null) {
      data['avatar_168x168'] = avatar_168x168!.toJson();
    }
    data['room_id'] = roomId;
    data['platform_sync_info'] = platformSyncInfo;
    data['avatar_uri'] = avatarUri;
    data['hide_search'] = hideSearch;
    data['user_canceled'] = userCanceled;
    data['follower_status'] = followerStatus;
    data['user_period'] = userPeriod;
    data['relative_users'] = relativeUsers;
    data['geofencing'] = geofencing;
    data['aweme_count'] = awemeCount;
    data['youtube_expire_time'] = youtubeExpireTime;
    data['twitter_id'] = twitterId;
    data['item_list'] = itemList;
    data['has_insights'] = hasInsights;
    data['bold_fields'] = boldFields;
    data['is_block'] = isBlock;
    data['accept_private_policy'] = acceptPrivatePolicy;
    data['events'] = events;
    data['can_message_follow_status_list'] = canMessageFollowStatusList;
    data['react_setting'] = reactSetting;
    data['user_mode'] = userMode;
    data['with_commerce_entry'] = withCommerceEntry;
    data['is_ad_fake'] = isAdFake;
    data['uid'] = uid;
    data['bind_phone'] = bindPhone;
    data['has_facebook_token'] = hasFacebookToken;
    data['live_commerce'] = liveCommerce;
    data['type_label'] = typeLabel;
    data['live_verify'] = liveVerify;
    data['has_email'] = hasEmail;
    data['user_rate'] = userRate;
    if (avatarLarger != null) {
      data['avatar_larger'] = avatarLarger!.toJson();
    }
    data['fb_expire_time'] = fbExpireTime;
    data['sec_uid'] = secUid;
    data['language'] = language;
    data['follower_count'] = followerCount;
    data['favoriting_count'] = favoritingCount;
    data['user_tags'] = userTags;
    data['white_cover_url'] = whiteCoverUrl;
    data['unique_id_modify_time'] = uniqueIdModifyTime;
    data['commerce_user_level'] = commerceUserLevel;
    data['with_shop_entry'] = withShopEntry;
    data['status'] = status;
    data['mention_status'] = mentionStatus;
    data['verification_type'] = verificationType;
    data['google_account'] = googleAccount;
    data['is_phone_binded'] = isPhoneBinded;
    data['advance_feature_item_order'] = advanceFeatureItemOrder;
    data['special_lock'] = specialLock;
    data['region'] = region;
    data['search_highlight'] = searchHighlight;
    data['short_id'] = shortId;
    data['has_twitter_token'] = hasTwitterToken;
    data['download_prompt_ts'] = downloadPromptTs;
    data['homepage_bottom_toast'] = homepageBottomToast;
    data['user_profile_guide'] = userProfileGuide;
    data['nickname'] = nickname;
    data['signature'] = signature;
    if (avatarMedium != null) {
      data['avatar_medium'] = avatarMedium!.toJson();
    }
    data['following_count'] = followingCount;
    data['has_orders'] = hasOrders;
    data['need_recommend'] = needRecommend;
    data['shield_digg_notice'] = shieldDiggNotice;
    data['enterprise_verify_reason'] = enterpriseVerifyReason;
    data['ins_id'] = insId;
    if (coverUrl != null) {
      final v = coverUrl;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['cover_url'] = arr0;
    }
    if (avatar_300x300 != null) {
      data['avatar_300x300'] = avatar_300x300!.toJson();
    }
    data['follow_status'] = followStatus;
    data['verify_info'] = verifyInfo;
    data['youtube_channel_id'] = youtubeChannelId;
    data['stitch_setting'] = stitchSetting;
    data['advanced_feature_info'] = advancedFeatureInfo;
    if (videoIcon != null) {
      data['video_icon'] = videoIcon!.toJson();
    }
    data['twitter_name'] = twitterName;
    data['duet_setting'] = duetSetting;
    data['share_qrcode_uri'] = shareQrcodeUri;
    if (avatarThumb != null) {
      data['avatar_thumb'] = avatarThumb!.toJson();
    }
    if (shareInfo != null) {
      data['share_info'] = shareInfo!.toJson();
    }
    data['comment_filter_status'] = commentFilterStatus;
    data['cha_list'] = chaList;
    data['friends_status'] = friendsStatus;
    data['authority_status'] = authorityStatus;
    data['shield_comment_notice'] = shieldCommentNotice;
    data['secret'] = secret;
    data['unique_id'] = uniqueId;
    data['youtube_channel_title'] = youtubeChannelTitle;
    data['download_setting'] = downloadSetting;
    data['followers_detail'] = followersDetail;
    data['comment_setting'] = commentSetting;
    data['live_agreement'] = liveAgreement;
    data['prevent_download'] = preventDownload;
    return data;
  }
}

class GetTikTokVideoModelResultAwemeDetail {
  GetTikTokVideoModelResultAwemeDetailAuthor? author;
  String? shareUrl;
  String? groupId;
  GetTikTokVideoModelResultAwemeDetailCommerceInfo? commerceInfo;
  List<String?>? contentDescExtra;
  String? geofencing;
  bool? isPgcshow;
  String? itemStitch;
  String? greenScreenMaterials;
  String? productsInfo;
  String? awemeId;
  List<GetTikTokVideoModelResultAwemeDetailTextExtra?>? textExtra;
  GetTikTokVideoModelResultAwemeDetailLabelTop? labelTop;
  bool? cmtSwt;
  String? originCommentIds;
  String? distributeType;
  String? followUpPublishFromId;
  String? userDigged;
  List<String?>? videoLabels;
  String? region;
  String? collectStat;
  String? chaList;
  bool? withPromotionalMusic;
  String? commerceConfigData;
  bool? playlistBlocked;
  String? contentDesc;
  String? createTime;
  bool? isVr;
  String? itemReact;
  String? questionList;
  String? musicBeginTimeInMs;
  String? imageInfos;
  String? sortLabel;
  bool? preventDownload;
  bool? withoutWatermark;
  String? interactionStickers;
  bool? haveDashboard;
  String? hybridLabel;
  GetTikTokVideoModelResultAwemeDetailStatus? status;
  String? uniqidPosition;
  String? descLanguage;
  String? desc;
  String? coverLabels;
  bool? needTrimStep;
  List<String?>? videoText;
  String? itemCommentSettings;
  GetTikTokVideoModelResultAwemeDetailVideoControl? videoControl;
  String? isPreview;
  String? brandedContentAccounts;
  GetTikTokVideoModelResultAwemeDetailShareInfo? shareInfo;
  GetTikTokVideoModelResultAwemeDetailRiskInfos? riskInfos;
  String? bodydanceScore;
  GetTikTokVideoModelResultAwemeDetailMusic? music;
  GetTikTokVideoModelResultAwemeDetailVideo? video;
  GetTikTokVideoModelResultAwemeDetailStatistics? statistics;
  String? searchHighlight;
  GetTikTokVideoModelResultAwemeDetailInteractPermission? interactPermission;
  String? musicEndTimeInMs;
  String? authorUserId;
  String? isHashTag;
  String? longVideo;
  String? anchors;
  String? retryType;
  String? miscInfo;
  bool? disableSearchTrendingBar;
  String? rate;
  String? isTop;
  String? awemeType;
  String? position;
  String? labelTopText;
  String? itemDuet;
  List<String?>? maskInfos;
  GetTikTokVideoModelResultAwemeDetailGroupIdList? groupIdList;
  String? distance;
  bool? isAds;
  bool? isRelieve;
  String? nicknamePosition;
  String? challengePosition;
  String? geofencingRegions;

  GetTikTokVideoModelResultAwemeDetail({
    this.author,
    this.shareUrl,
    this.groupId,
    this.commerceInfo,
    this.contentDescExtra,
    this.geofencing,
    this.isPgcshow,
    this.itemStitch,
    this.greenScreenMaterials,
    this.productsInfo,
    this.awemeId,
    this.textExtra,
    this.labelTop,
    this.cmtSwt,
    this.originCommentIds,
    this.distributeType,
    this.followUpPublishFromId,
    this.userDigged,
    this.videoLabels,
    this.region,
    this.collectStat,
    this.chaList,
    this.withPromotionalMusic,
    this.commerceConfigData,
    this.playlistBlocked,
    this.contentDesc,
    this.createTime,
    this.isVr,
    this.itemReact,
    this.questionList,
    this.musicBeginTimeInMs,
    this.imageInfos,
    this.sortLabel,
    this.preventDownload,
    this.withoutWatermark,
    this.interactionStickers,
    this.haveDashboard,
    this.hybridLabel,
    this.status,
    this.uniqidPosition,
    this.descLanguage,
    this.desc,
    this.coverLabels,
    this.needTrimStep,
    this.videoText,
    this.itemCommentSettings,
    this.videoControl,
    this.isPreview,
    this.brandedContentAccounts,
    this.shareInfo,
    this.riskInfos,
    this.bodydanceScore,
    this.music,
    this.video,
    this.statistics,
    this.searchHighlight,
    this.interactPermission,
    this.musicEndTimeInMs,
    this.authorUserId,
    this.isHashTag,
    this.longVideo,
    this.anchors,
    this.retryType,
    this.miscInfo,
    this.disableSearchTrendingBar,
    this.rate,
    this.isTop,
    this.awemeType,
    this.position,
    this.labelTopText,
    this.itemDuet,
    this.maskInfos,
    this.groupIdList,
    this.distance,
    this.isAds,
    this.isRelieve,
    this.nicknamePosition,
    this.challengePosition,
    this.geofencingRegions,
  });
  GetTikTokVideoModelResultAwemeDetail.fromJson(Map<String, dynamic> json) {
    author = (json['author'] != null && (json['author'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailAuthor.fromJson(json['author'])
        : null;
    shareUrl = json['share_url']?.toString();
    groupId = json['group_id']?.toString();
    commerceInfo =
        (json['commerce_info'] != null && (json['commerce_info'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailCommerceInfo.fromJson(
                json['commerce_info'])
            : null;

    geofencing = json['geofencing']?.toString();
    isPgcshow = json['is_pgcshow'];
    itemStitch = json['item_stitch']?.toString();
    greenScreenMaterials = json['green_screen_materials']?.toString();
    productsInfo = json['products_info']?.toString();
    awemeId = json['aweme_id']?.toString();
    if (json['text_extra'] != null && (json['text_extra'] is List)) {
      final v = json['text_extra'];
      final arr0 = <GetTikTokVideoModelResultAwemeDetailTextExtra>[];
      v.forEach((v) {
        arr0.add(GetTikTokVideoModelResultAwemeDetailTextExtra.fromJson(v));
      });
      textExtra = arr0;
    }
    labelTop = (json['label_top'] != null && (json['label_top'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailLabelTop.fromJson(
            json['label_top'])
        : null;
    cmtSwt = json['cmt_swt'];
    originCommentIds = json['origin_comment_ids']?.toString();
    distributeType = json['distribute_type']?.toString();
    followUpPublishFromId = json['follow_up_publish_from_id']?.toString();
    userDigged = json['user_digged']?.toString();

    region = json['region']?.toString();
    collectStat = json['collect_stat']?.toString();
    chaList = json['cha_list']?.toString();
    withPromotionalMusic = json['with_promotional_music'];
    commerceConfigData = json['commerce_config_data']?.toString();
    playlistBlocked = json['playlist_blocked'];
    contentDesc = json['content_desc']?.toString();
    createTime = json['create_time']?.toString();
    isVr = json['is_vr'];
    itemReact = json['item_react']?.toString();
    questionList = json['question_list']?.toString();
    musicBeginTimeInMs = json['music_begin_time_in_ms']?.toString();
    imageInfos = json['image_infos']?.toString();
    sortLabel = json['sort_label']?.toString();
    preventDownload = json['prevent_download'];
    withoutWatermark = json['without_watermark'];
    interactionStickers = json['interaction_stickers']?.toString();
    haveDashboard = json['have_dashboard'];
    hybridLabel = json['hybrid_label']?.toString();
    status = (json['status'] != null && (json['status'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailStatus.fromJson(json['status'])
        : null;
    uniqidPosition = json['uniqid_position']?.toString();
    descLanguage = json['desc_language']?.toString();
    desc = json['desc']?.toString();
    coverLabels = json['cover_labels']?.toString();
    needTrimStep = json['need_trim_step'];

    itemCommentSettings = json['item_comment_settings']?.toString();
    videoControl =
        (json['video_control'] != null && (json['video_control'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailVideoControl.fromJson(
                json['video_control'])
            : null;
    isPreview = json['is_preview']?.toString();
    brandedContentAccounts = json['branded_content_accounts']?.toString();
    shareInfo = (json['share_info'] != null && (json['share_info'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailShareInfo.fromJson(
            json['share_info'])
        : null;
    riskInfos = (json['risk_infos'] != null && (json['risk_infos'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailRiskInfos.fromJson(
            json['risk_infos'])
        : null;
    bodydanceScore = json['bodydance_score']?.toString();
    music = (json['music'] != null && (json['music'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailMusic.fromJson(json['music'])
        : null;
    video = (json['video'] != null && (json['video'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailVideo.fromJson(json['video'])
        : null;
    statistics = (json['statistics'] != null && (json['statistics'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailStatistics.fromJson(
            json['statistics'])
        : null;
    searchHighlight = json['search_highlight']?.toString();
    interactPermission = (json['interact_permission'] != null &&
            (json['interact_permission'] is Map))
        ? GetTikTokVideoModelResultAwemeDetailInteractPermission.fromJson(
            json['interact_permission'])
        : null;
    musicEndTimeInMs = json['music_end_time_in_ms']?.toString();
    authorUserId = json['author_user_id']?.toString();
    isHashTag = json['is_hash_tag']?.toString();
    longVideo = json['long_video']?.toString();
    anchors = json['anchors']?.toString();
    retryType = json['retry_type']?.toString();
    miscInfo = json['misc_info']?.toString();
    disableSearchTrendingBar = json['disable_search_trending_bar'];
    rate = json['rate']?.toString();
    isTop = json['is_top']?.toString();
    awemeType = json['aweme_type']?.toString();
    position = json['position']?.toString();
    labelTopText = json['label_top_text']?.toString();
    itemDuet = json['item_duet']?.toString();

    groupIdList =
        (json['group_id_list'] != null && (json['group_id_list'] is Map))
            ? GetTikTokVideoModelResultAwemeDetailGroupIdList.fromJson(
                json['group_id_list'])
            : null;
    distance = json['distance']?.toString();
    isAds = json['is_ads'];
    isRelieve = json['is_relieve'];
    nicknamePosition = json['nickname_position']?.toString();
    challengePosition = json['challenge_position']?.toString();
    geofencingRegions = json['geofencing_regions']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (author != null) {
      data['author'] = author!.toJson();
    }
    data['share_url'] = shareUrl;
    data['group_id'] = groupId;
    if (commerceInfo != null) {
      data['commerce_info'] = commerceInfo!.toJson();
    }

    data['geofencing'] = geofencing;
    data['is_pgcshow'] = isPgcshow;
    data['item_stitch'] = itemStitch;
    data['green_screen_materials'] = greenScreenMaterials;
    data['products_info'] = productsInfo;
    data['aweme_id'] = awemeId;
    if (textExtra != null) {
      final v = textExtra;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['text_extra'] = arr0;
    }
    if (labelTop != null) {
      data['label_top'] = labelTop!.toJson();
    }
    data['cmt_swt'] = cmtSwt;
    data['origin_comment_ids'] = originCommentIds;
    data['distribute_type'] = distributeType;
    data['follow_up_publish_from_id'] = followUpPublishFromId;
    data['user_digged'] = userDigged;

    data['region'] = region;
    data['collect_stat'] = collectStat;
    data['cha_list'] = chaList;
    data['with_promotional_music'] = withPromotionalMusic;
    data['commerce_config_data'] = commerceConfigData;
    data['playlist_blocked'] = playlistBlocked;
    data['content_desc'] = contentDesc;
    data['create_time'] = createTime;
    data['is_vr'] = isVr;
    data['item_react'] = itemReact;
    data['question_list'] = questionList;
    data['music_begin_time_in_ms'] = musicBeginTimeInMs;
    data['image_infos'] = imageInfos;
    data['sort_label'] = sortLabel;
    data['prevent_download'] = preventDownload;
    data['without_watermark'] = withoutWatermark;
    data['interaction_stickers'] = interactionStickers;
    data['have_dashboard'] = haveDashboard;
    data['hybrid_label'] = hybridLabel;
    if (status != null) {
      data['status'] = status!.toJson();
    }
    data['uniqid_position'] = uniqidPosition;
    data['desc_language'] = descLanguage;
    data['desc'] = desc;
    data['cover_labels'] = coverLabels;
    data['need_trim_step'] = needTrimStep;

    data['item_comment_settings'] = itemCommentSettings;
    if (videoControl != null) {
      data['video_control'] = videoControl!.toJson();
    }
    data['is_preview'] = isPreview;
    data['branded_content_accounts'] = brandedContentAccounts;
    if (shareInfo != null) {
      data['share_info'] = shareInfo!.toJson();
    }
    if (riskInfos != null) {
      data['risk_infos'] = riskInfos!.toJson();
    }
    data['bodydance_score'] = bodydanceScore;
    if (music != null) {
      data['music'] = music!.toJson();
    }
    if (video != null) {
      data['video'] = video!.toJson();
    }
    if (statistics != null) {
      data['statistics'] = statistics!.toJson();
    }
    data['search_highlight'] = searchHighlight;
    if (interactPermission != null) {
      data['interact_permission'] = interactPermission!.toJson();
    }
    data['music_end_time_in_ms'] = musicEndTimeInMs;
    data['author_user_id'] = authorUserId;
    data['is_hash_tag'] = isHashTag;
    data['long_video'] = longVideo;
    data['anchors'] = anchors;
    data['retry_type'] = retryType;
    data['misc_info'] = miscInfo;
    data['disable_search_trending_bar'] = disableSearchTrendingBar;
    data['rate'] = rate;
    data['is_top'] = isTop;
    data['aweme_type'] = awemeType;
    data['position'] = position;
    data['label_top_text'] = labelTopText;
    data['item_duet'] = itemDuet;

    if (groupIdList != null) {
      data['group_id_list'] = groupIdList!.toJson();
    }
    data['distance'] = distance;
    data['is_ads'] = isAds;
    data['is_relieve'] = isRelieve;
    data['nickname_position'] = nicknamePosition;
    data['challenge_position'] = challengePosition;
    data['geofencing_regions'] = geofencingRegions;
    return data;
  }
}

class GetTikTokVideoModelResultMusic {
  List<String?>? urlList;
  String? matchedSong;

  GetTikTokVideoModelResultMusic({
    this.urlList,
    this.matchedSong,
  });
  GetTikTokVideoModelResultMusic.fromJson(Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    matchedSong = json['matched_song']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['matched_song'] = matchedSong;
    return data;
  }
}

class GetTikTokVideoModelResultVideo {
  List<String?>? urlList;
  String? dataSize;
  String? duration;

  GetTikTokVideoModelResultVideo({
    this.urlList,
    this.dataSize,
    this.duration,
  });
  GetTikTokVideoModelResultVideo.fromJson(Map<String, dynamic> json) {
    if (json['url_list'] != null && (json['url_list'] is List)) {
      final v = json['url_list'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      urlList = arr0;
    }
    dataSize = json['data_size']?.toString();
    duration = json['duration']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (urlList != null) {
      final v = urlList;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['url_list'] = arr0;
    }
    data['data_size'] = dataSize;
    data['duration'] = duration;
    return data;
  }
}

class GetTikTokVideoModelResult {
  String? awemeId;
  GetTikTokVideoModelResultVideo? video;
  GetTikTokVideoModelResultMusic? music;
  GetTikTokVideoModelResultAwemeDetail? awemeDetail;

  GetTikTokVideoModelResult({
    this.awemeId,
    this.video,
    this.music,
    this.awemeDetail,
  });
  GetTikTokVideoModelResult.fromJson(Map<String, dynamic> json) {
    awemeId = json['aweme_id']?.toString();
    video = (json['video'] != null && (json['video'] is Map))
        ? GetTikTokVideoModelResultVideo.fromJson(json['video'])
        : null;
    music = (json['music'] != null && (json['music'] is Map))
        ? GetTikTokVideoModelResultMusic.fromJson(json['music'])
        : null;
    awemeDetail = (json['aweme_detail'] != null &&
            (json['aweme_detail'] is Map))
        ? GetTikTokVideoModelResultAwemeDetail.fromJson(json['aweme_detail'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['aweme_id'] = awemeId;
    if (video != null) {
      data['video'] = video!.toJson();
    }
    if (music != null) {
      data['music'] = music!.toJson();
    }
    if (awemeDetail != null) {
      data['aweme_detail'] = awemeDetail!.toJson();
    }
    return data;
  }
}

class GetTikTokVideoModel {
  bool? ok;
  GetTikTokVideoModelResult? result;

  GetTikTokVideoModel({
    this.ok,
    this.result,
  });
  GetTikTokVideoModel.fromJson(Map<String, dynamic> json) {
    ok = json['ok'];
    result = (json['result'] != null && (json['result'] is Map))
        ? GetTikTokVideoModelResult.fromJson(json['result'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['ok'] = ok;
    if (result != null) {
      data['result'] = result!.toJson();
    }
    return data;
  }
}
